@node Reader
@section Reader

@subsection @code{*read-supress*}
The behaviour of @code{*read-supress*} is not fully specified in the
standard. ECL tries to be as liberal as possible in the syntax that it
accepts when @code{*read-suppress*} is true. Errors are only signaled
in the following cases:
@itemize @bullet
@item End of file
@item Unbalanced parantheses
@item Invalid dispatching macro characters such as @code{<} or @code{)} (Undefined dispatching macro characters don't produce errors)
@end itemize

@subsection C Reference

@subsubsection ANSI Dictionary
Common Lisp and C equivalence

@multitable @columnfractions .3 .7
@headitem Lisp symbol @tab C function
@item @clhs{f_cp_rdt.htm,copy-readtable} @tab cl_object cl_copy_readtable(cl_narg narg, ...)
@item @clhs{f_mk_dis.htm,make-dispatch-macro-character} @tab cl_object cl_make_dispatch_macro_character(cl_narg narg, cl_object char, ...)
@item @clhs{f_rd_rd.htm,read} @tab cl_object cl_read(cl_narg narg, ...)
@item @clhs{f_rd_rd.htm,read-preserving-whitespace} @tab cl_object cl_read_preserving_whitespace(cl_narg narg, ...)
@item @clhs{f_rd_de1.htm,read-delimited-list} @tab cl_object cl_read_delimited_list(cl_narg narg, cl_object char, ...)
@item @clhs{f_rd_fro.htm,read-from-string} @tab cl_object cl_read_from_string(cl_narg narg, cl_object string, ...)
@item @clhs{f_rdtab1.htm,readtable-case} @tab cl_object cl_readtable_case(cl_object readtable)
@item @clhs{f_rdtab1.htm,(setf readtable-case)} @tab cl_object si_readtable_case_set(cl_object readtable, cl_object mode)
@item @clhs{f_rdta_1.htm,readtablep} @tab cl_object cl_readtablep(cl_object object)
@item @clhs{f_set__1.htm,get-dispatch-macro-character} @tab cl_object cl_get_dispatch_macro_character(cl_narg narg, cl_object disp_char, cl_object sub_char, ...)
@item @clhs{f_set__1.htm,set-dispatch-macro-character} @tab cl_object cl_set_dispatch_macro_character(cl_narg narg, cl_object disp_char, cl_object sub_char, cl_object function, ...)
@item @clhs{f_set_ma.htm,get-macro-character} @tab cl_object cl_get_macro_character(cl_narg narg, cl_object char, ...)
@item @clhs{f_set_ma.htm,set-macro-character} @tab cl_object cl_set_macro_character(cl_narg narg, cl_object char, cl_object function, ...)
@item @clhs{f_set_sy.htm,set-syntax-from-char} @tab cl_object cl_set_syntax_from_char(cl_narg narg, cl_object to_char, cl_object from_char, ...)
@end multitable
