;;;; -*- Mode: Lisp; Syntax: Common-Lisp; indent-tabs-mode: nil -*-
;;;; vim: set filetype=lisp tabstop=8 shiftwidth=2 expandtab:

;;; @configure_input@

(defvar +clos-module-files+
'("src:clos;package.lsp"
  "src:clos;cpl.lsp"
  "src:clos;std-slot-value.lsp"
  "src:clos;slot.lsp"
  "src:clos;boot.lsp"
  "src:clos;dispatch.lsp"
  "src:clos;kernel.lsp"
  "src:clos;method.lsp"
  "src:clos;combin.lsp"
  "src:clos;std-accessors.lsp"
  "src:clos;defclass.lsp"
  "src:clos;slotvalue.lsp"
  "src:clos;standard.lsp"
  "src:clos;builtin.lsp"
  "src:clos;change.lsp"
  "src:clos;stdmethod.lsp"
  "src:clos;generic.lsp"
  "src:clos;fixup.lsp"
  "src:clos;conditions.lsp"
  "src:clos;print.lsp"
  #+clos-streams
  "src:clos;streams.lsp"
  #+cmu-format
  "src:lsp;pprint.lsp"
  "src:lsp;describe.lsp" ; Depends on conditions.lsp
  "src:clos;inspect.lsp" ; Depends on describe.lsp
  "src:lsp;top.lsp" ; Depends on conditions.lsp
  "src:lsp;process.lsp" ; Depends on defclass
  #+unicode
  "src:lsp;unicode.lsp" ; Depends on conditions.lsp
  "ext:bytecmp;bytecmp.lsp"
  "ext:ecl-cdb;ecl-cdb.lisp" ; Needed for DOCUMENTATION
  "ext:ecl-cdb;ecl-help.lisp"
  "src:clos;walk.lsp"
  ))

(mapc #'(lambda (x)
         (terpri)
         (princ ";;; Loading ")
         (princ x)
         (load x :verbose nil))
 +clos-module-files+)

(setf +clos-module-files+ (remove "src:clos;macros.lsp" +clos-module-files+ :test #'equalp))
